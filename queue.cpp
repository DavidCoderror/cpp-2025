#include <iostream>
#include <queue> // Important
using namespace std;

//Function 1: Queue1 + Queue2

//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//------------------------------------------Functions-----------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//

queue<int> add(queue<int> q1, queue<int> q2) {
	while (!q2.empty()) {
		q1.push(q2.front());
		q2.pop();
	}
}

//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------MAIN--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//
//--------------------------------------------////--------------------------------------------//

int main()
{
	//Declaration
	queue<int> q;
	q.push(4);   //Adds specified element into  list
	q.push(3); 
	q.push(2);

	q.pop();	//Deletes the most recently pushed element
	
	q.size();	//Size of the stack

	q.front();	//Gets the most recent element
	q.empty();  //Emptys the whole list


	queue<int> queue = q; //Creates a copy of specified queue

	//How to go through a queue :)
	std::cout << "Stack elements: ";
	while (!queue.empty()) {
		std::cout << queue.front() << " ";
		queue.pop();  // Remove top element
	}

	return 0;

}
